pipeline {
   agent { label 'agent-vm' }

  environment {
    AWS_REGION = 'us-east-1'
    ECR_REPO = 'nodejs_app'
    ECR_REGISTRY = '289222951012.dkr.ecr.us-east-1.amazonaws.com'
    IMAGE_TAG = "${BUILD_NUMBER}"
    GIT_CREDENTIALS_ID = 'github'
    CLUSTER_NAME = 'my-eks-cluster'
    NAMESPACE = 'ivolve'
    // SERVICE_NAME = 'hello-eyego-service'
    DEPLOYMENT_FILE = 'deployment.yml'
    // SERVICE_FILE = 'service.yaml'
  }

  stages {

    stage('Login to AWS ECR') {
      steps {
        withCredentials([
          string(credentialsId: 'aws-access-key',    variable: 'AWS_ACCESS_KEY_ID'),
          string(credentialsId: 'aws-secret-key',    variable: 'AWS_SECRET_ACCESS_KEY'),
          string(credentialsId: 'aws-session-token', variable: 'AWS_SESSION_TOKEN')
        ]) {
          sh '''
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            aws configure set aws_session_token $AWS_SESSION_TOKEN
            aws configure set region $AWS_REGION

            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY
          '''
        }
      }
    }

    stage('Build Docker Image') {
      steps {
        dir('nodejs_app'){
          sh '''
          docker build -t $ECR_REPO:$IMAGE_TAG .
          '''
        }
      }
    }
    stage('Create ECR Repo if Not Exists') {
      steps {
       sh '''
       aws ecr describe-repositories --repository-names $ECR_REPO || \
       aws ecr create-repository --repository-name $ECR_REPO --region $AWS_REGION
       '''
       }
    }
    stage('Tag & Push Docker Image to ECR') {
      steps {
        sh '''
          docker tag $ECR_REPO:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPO:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPO:$IMAGE_TAG
        '''
      }
    }

    stage('Scan Docker Image Using Trivy') {
      steps {
          sh '''
          trivy image --format json --output trivy-report.json $ECR_REGISTRY/$ECR_REPO:$IMAGE_TAG 
          '''
      }
    }

    stage('Cleanup Local Images') {
            steps {
                sh """
                    docker rmi $ECR_REPO:$IMAGE_TAG || true
                    docker rmi $ECR_REGISTRY/$ECR_REPO:$IMAGE_TAG || true
                """
            }
        }

    stage('Clone ArgoCD Manifests Repo') {
            steps {
                 dir('.') {
                    git branch: 'main',
                        credentialsId: GIT_CREDENTIALS_ID,
                        url: 'https://github.com/Orabi20/CloudDevOpsProject'
                 }
            }
        }

    stage('Update Deployment File with New Image') {
            steps {
                 dir('argocd_k8s_manifest/nodejs_app_deployment') {
                    withCredentials([usernamePassword(credentialsId: GIT_CREDENTIALS_ID, usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]) {
                        sh '''
                            git config user.name "jenkins"
                            git config user.email "jenkins@example.com"

                            sed -i 's|image:.*|image: '"$ECR_REGISTRY/$ECR_REPO:$IMAGE_TAG"'|' $DEPLOYMENT_FILE
                            git add $DEPLOYMENT_FILE
                            git commit -m "Update image to $ECR_REGISTRY/$ECR_REPO:$IMAGE_TAG" || echo "No changes to commit"
                 
                            git push https://$GIT_USERNAME:$GIT_PASSWORD@github.com/Orabi20/CloudDevOpsProject.git
                       '''
                    }
                }
            }
        }
    // stage('Update K8s Deployment') {
    //   steps {
    //      dir('k8s') {
    //         sh '''
    //           aws eks update-kubeconfig --region $AWS_REGION --name $CLUSTER_NAME
              
    //           kubectl get namespace $NAMESPACE || kubectl create namespace $NAMESPACE

    //           sed -i "s|image:.*|image: $ECR_REGISTRY/$ECR_REPO:$IMAGE_TAG|" $DEPLOYMENT_FILE
              
    //           kubectl apply -n $NAMESPACE -f $DEPLOYMENT_FILE
    //           kubectl apply -n $NAMESPACE -f $SERVICE_FILE

    //           kubectl get svc -n $NAMESPACE $SERVICE_NAME -o jsonpath='{.status.loadBalancer.ingress[0].hostname}'
    //         '''
    //     }
    //   }
    // }
  }
  
  post {
    success {
      echo "Deployment successful"
    }
    failure {
      echo "Deployment failed"
    }
  }
}